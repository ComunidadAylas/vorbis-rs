name: CI

on:
  push:
  pull_request:
    types:
      - opened
      - synchronize

env:
  MSRV: '1.60.0'

jobs:
  msrv_check:
    name: MSRV check

    runs-on: ubuntu-22.04

    # Exclude in-repo PRs from running this job
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork

    steps:
      - name: üì• Checkout source
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          submodules: recursive

      - name: üß∞ Install MSRV toolchain
        uses: dtolnay/rust-toolchain@0e66bd3e6b38ec0ad5312288c83e47c143e6b09e # v1
        with:
          toolchain: ${{ env.MSRV }}

      - name: üí® Cache Rust artifacts
        uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4 # v2

      - name: ‚öôÔ∏è Run tests
        run: cargo test -p ogg_next_sys -p aotuv_lancer_vorbis_sys -p vorbis_rs

  ci:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-22.04
            packages-to-test: -p ogg_next_sys -p aotuv_lancer_vorbis_sys -p vorbis_rs
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-22.04
            packages-to-test: -p ogg_next_sys -p aotuv_lancer_vorbis_sys -p vorbis_rs
          - target: x86_64-pc-windows-gnu
            runner: windows-2022
            # Low-level FFI binding crates mostly contain layout tests
            # that assume a Unix-like platform, so they won't work
            # on Windows
            packages-to-test: -p vorbis_rs
          - target: x86_64-apple-darwin
            runner: macos-11
            packages-to-test: -p ogg_next_sys -p aotuv_lancer_vorbis_sys -p vorbis_rs

    name: CI (${{ matrix.target }})
    runs-on: ${{ matrix.runner }}

    # Exclude in-repo PRs from running this job
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork

    steps:
      - name: üì• Checkout source
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          submodules: recursive

      - name: üß∞ Install Rust toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          target: ${{ matrix.target }}
          components: rust-src, rustfmt, clippy

      - name: üß∞ Install ARM64 cross-compilation toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt update && sudo apt install -yq gcc-aarch64-linux-gnu libc6-arm64-cross qemu-user

      - name: üí® Cache Rust artifacts
        uses: Swatinem/rust-cache@e207df5d269b42b69c8bc5101da26f7d31feddb4 # v2

      - name: 'üîç Static analysis: run Clippy'
        uses: giraffate/clippy-action@13b9d32482f25d29ead141b79e7e04e7900281e0 # v1
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        with:
          clippy_flags: --no-deps -- -D warnings
          reporter: github-check
          fail_on_error: true

      - name: 'üîç Static analysis: run rustfmt'
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo fmt --check --all

      - name: ‚úîÔ∏è Run tests
        env:
          # Handle AArch64 dynamic libraries installed by libc6-arm64-cross
          # being in a path that the dynamic linker does not check by default
          LD_LIBRARY_PATH: /usr/aarch64-linux-gnu/lib
        run: cargo test --release --target ${{ matrix.target }} -Zdoctest-xcompile
          ${{ matrix.packages-to-test }} -- --nocapture
