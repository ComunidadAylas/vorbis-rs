name: CI

on:
  push:
  pull_request:
    types:
      - opened
      - synchronize

env:
  CARGO_TERM_COLOR: always

jobs:
  ci:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            runner: ubuntu-20.04
            packages-to-test: -p ogg_sys -p vorbis_sys -p vorbis
          - target: aarch64-unknown-linux-gnu
            runner: ubuntu-20.04
            packages-to-test: -p ogg_sys -p vorbis_sys -p vorbis
          - target: x86_64-pc-windows-gnu
            runner: windows-2022
            # Low-level FFI binding crates mostly contain layout tests
            # that assume a Unix-like platform, so they won't work
            # on Windows
            packages-to-test: -p vorbis
          - target: x86_64-apple-darwin
            runner: macos-11
            packages-to-test: -p ogg_sys -p vorbis_sys -p vorbis

    name: CI (${{ matrix.target }})
    runs-on: ${{ matrix.runner }}

    # Only run if this is not a pull request, or for pull requests on forks
    if: github.event_name != 'pull_request' ||
      github.event.pull_request.head.repo.full_name != 'ComunidadAylas/vorbis-rs'

    steps:
      - name: üì• Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: üß∞ Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          target: ${{ matrix.target }}
          profile: minimal
          components: rust-src, rustfmt, clippy

      - name: üß∞ Install ARM64 cross-compilation toolchain
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: sudo apt install -yq gcc-aarch64-linux-gnu libc6-arm64-cross qemu-user

      - name: üí® Cache Rust artifacts
        uses: Swatinem/rust-cache@v1

      - name: 'üîç Static analysis: run Clippy'
        uses: actions-rs/clippy-check@v1
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        with:
          args: --no-deps -- -D warnings
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 'üîç Static analysis: run rustfmt'
        uses: actions-rs/cargo@v1
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        with:
          command: fmt
          args: --check --all

      - name: ‚úîÔ∏è Run tests
        uses: actions-rs/cargo@v1
        env:
          # Handle AArch64 dynamic libraries installed by libc6-arm64-cross
          # being in a path that the dynamic linker does not check by default
          LD_LIBRARY_PATH: /usr/aarch64-linux-gnu/lib
        with:
          command: test
          args: --release --target ${{ matrix.target }} ${{ matrix.packages-to-test }} -- --nocapture
